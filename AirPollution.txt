library(padr)
library(dplyr)
library(tidyr)
library(readxl)
library(magrittr)
library(forecast)
library(imputeTS)
library(DMwR)

#Read Data
delhi_air <- read_excel("Downloads/Delhi.xlsx")
str(delhi_air)

#Converting structure of PM25 Data Into Numeric
delhi_air$pm25 <- gsub('-',NA,delhi_air$pm25,fixed=TRUE)       #"-" converted into NA
delhi_air$pm25<- as.numeric(delhi_air$pm25)
str(delhi_air)
plot(delhi_air$pm25,type = "l")

##Counting NA Values
sum(is.na(delhi_air$pm25))

## Filling up Date n Time
delhi_fill<- pad(as.data.frame(delhi_air,interval = NULL, start_val = NULL, end_val =NULL))
View(delhi_fill)
sum(is.na(delhi_fill$pm25))
plotNA.distribution(delhi_fill$pm25)    ## showing missing values
str(delhi_fill)


##replacing missing values with 
#delhi_fill$intrpolation<- na_seasplit(delhi_fill$pm25,algorithm = "interpolation",find_frequency=TRUE)
delhi_fill$pm_ma<- na_seasplit(delhi_fill$pm25,algorithm = "ma",find_frequency = T)

View(delhi_fill)
str(delhi_fill)
delhi_fill<- delhi_fill[,-c(2)]

## Converted Into Time Series 
delhi_fill$pm_ma<- ts(delhi_fill$pm_ma,frequency =365*24,start = c(2018,1),end = c(2018,2617))
str(delhi_fill)

######  Testing For Data whether it is stationery Or Not
library(aTSA)
library(tseries)
stationary.test(delhi_fill$pm_ma, method = "pp") # pp test
stationary.test(delhi_fill$pm_ma,method = "adf")  #adf test
trend.test(delhi_fill$pm_ma)

## Visualization  ##
library(ggplot2)

### With TIME SERIES MOVING AVERAGE
ggplot(data = delhi_fill,aes(x= date,y= pm_ma)) + 
  geom_line(colour='red') +
  geom_line(colour="Blue",data = delhi_air,aes(x= date,y= pm25))+
  theme(panel.background = element_blank())+
  ylim(0,750)+
  ggtitle("MOVING AVERAGE Values")

View(delhi_fill)
str(delhi_fill)



library(forecast)


### splitting
train<- delhi_fill[1:2094,]
test<- delhi_fill[2095:2617,]
str(train)

train<- ts(train$pm_ma)
test<- ts(test$pm_ma)
library(dplyr)


##################### Model Building  ######################################

## AUTO-ARIMA ##

model_aa<- auto.arima(train,method = "ML")
accuracy(model_aa)                                    ####  Train RMSE = 50.33
pred_aa <- data.frame(forecast(model_aa,h = 523))
fcast_aa<- forecast(model_aa,h= 523)
plot(fcast_aa)
accuracy(as.vector(fcast_aa$mean),test)               #### Test RMSE = 91.16



##### Run Model On Whole Dataset
model_aa_wd<- auto.arima(delhi_fill$pm_ma,method = "ML")
accuracy(model_aa_wd)                                 #### Train RMSE = 52.78


library(padr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(magrittr)
library(forecast)
library(imputeTS)
library(DMwR)
#Read Data
delhi_air <- read_excel("Downloads/Delhi.xlsx")
str(delhi_air)

#Converting structure of PM25 Data Into Numeric
delhi_air$pm25 <- gsub('-',NA,delhi_air$pm25,fixed=TRUE)       #"-" converted into NA
delhi_air$pm25<- as.numeric(delhi_air$pm25)
str(delhi_air)
plot(delhi_air$pm25,type = "l")

##Counting NA Values
sum(is.na(delhi_air$pm25))

## Filling up Date n Time
delhi_fill<- pad(as.data.frame(delhi_air,interval = NULL, start_val = NULL, end_val =NULL))
View(delhi_fill)
sum(is.na(delhi_fill$pm25))
plotNA.distribution(delhi_fill$pm25)    ## showing missing values
str(delhi_fill)


##replacing missing values with 
#delhi_fill$intrpolation<- na_seasplit(delhi_fill$pm25,algorithm = "interpolation",find_frequency=TRUE)
delhi_fill$pm_ma<- na_seasplit(delhi_fill$pm25,algorithm = "ma",find_frequency = T)

View(delhi_fill)
str(delhi_fill)
## Converted Into Time Series 
ts_delhi<- ts(delhi_fill$pm_ma,frequency =8760,start = c(2018,1),end = c(2018,2617))


##Splitting Into Train n Test in Time Series
train<- delhi_fill[1:2094,]
test<- delhi_fill[2095:2617,]
str(train)


train<- ts(train$pm_ma)  
test<- ts(test$pm_ma)
library(dplyr)


library(dplyr)
## Model Building 
h_a<- holt(train,h = 523)
autoplot(h_a)
h_a$model
accuracy(h_a)               ## Train RMSE = 55.22

# identify optimal alpha parameter
beta <- seq(.0001, .5, by = .001)
RMSE <- NA
for(i in seq_along(beta)) {
  fit <- holt(train$pm_ma, beta = beta[i], h = 72)
  RMSE[i] <- accuracy(fit)[1,2]
}

# convert to a data frame and idenitify min alpha value
beta.fit <- data_frame(beta, RMSE)
beta.min <- filter(beta.fit, RMSE == min(RMSE))

# plot RMSE vs. alpha
ggplot(beta.fit, aes(beta, RMSE)) +
  geom_line() +
  geom_point(data = beta.min, aes(beta, RMSE), size = 2, color = "blue")

##############################################

# new model with optimal beta
holt.a.opt <- holt(train, h = 523, beta = 0.0001)
accuracy(holt.a.opt)                                  ## Train RMSE = 55.17
fcast_holt<- forecast(holt.a.opt,h = 523)
autoplot(holt.a.opt)
accuracy(as.vector(fcast_holt$mean),test)             ## Test RMSE = 141.45


######### RUN ON WHOLE DATA SET   #################

holts_wd<- holt(delhi_fill$pm_ma, h = 523,beta = 0.0001)
accuracy(holts_wd)                                    ## RMSE = 53.61

library(padr)
library(dplyr)
library(tidyr)
library(readxl)
library(magrittr)
library(forecast)
library(imputeTS)
library(DMwR)
#Read Data
delhi_air <- read_excel("Downloads/Delhi.xlsx")
str(delhi_air)

#Converting structure of PM25 Data Into Numeric
delhi_air$pm25 <- gsub('-',NA,delhi_air$pm25,fixed=TRUE)       #"-" converted into NA
delhi_air$pm25<- as.numeric(delhi_air$pm25)
str(delhi_air)
plot(delhi_air$pm25,type = "l")

##Counting NA Values
sum(is.na(delhi_air$pm25))

## Filling up Date n Time
delhi_fill<- pad(as.data.frame(delhi_air,interval = NULL, start_val = NULL, end_val =NULL))
View(delhi_fill)
sum(is.na(delhi_fill$pm25))
plotNA.distribution(delhi_fill$pm25)    ## showing missing values
str(delhi_fill)


##replacing missing values with 
#delhi_fill$intrpolation<- na_seasplit(delhi_fill$pm25,algorithm = "interpolation",find_frequency=TRUE)
delhi_fill$pm_ma<- na_seasplit(delhi_fill$pm25,algorithm = "ma",find_frequency = T)

View(delhi_fill)
str(delhi_fill)
## Converted Into Time Series 
ts_delhi<- ts(delhi_fill$pm_ma,frequency =365*24,start = c(2018,1),end = c(2018,2617))
str(ts_delhi)

######  Testing For Data whether it is stationery Or Not
library(aTSA)
library(tseries)
stationary.test(delhi_fill$pm_ma, method = "pp") # pp test
stationary.test(delhi_fill$pm_ma,method = "kpss")  #Kwiatkowski-Phillips-Schmidt-Shin test
trend.test(delhi_fill$pm_ma)

##Decomposing
delhi_decomp<- stl(delhi_fill$pm_ma,s.window = "periodic")
plot(delhi_decomp)

## Visualization  ##
library(ggplot2)

## With INTERPOLATIOn values
ggplot(data = delhi_fill,aes(x= date,y= intrpolation)) + 
  geom_line(colour='red') +
  geom_line(colour='blue',data = delhi_air,aes(x= date,y= pm25))+
  theme(panel.background = element_blank())+
  ylim(0,750)+
  ggtitle("Interpolation Values")


### With TIME SERIES MOVING AVERAGE
ggplot(data = delhi_fill,aes(x= date,y= pm_ma)) + 
  geom_line(colour='red') +
  geom_line(colour="Blue",data = delhi_air,aes(x= date,y= pm25))+
  theme(panel.background = element_blank())+
  ylim(0,750)+
  ggtitle("MOVING AVERAGE Values")

View(delhi_fill)
delhi_fill<- delhi_fill[,-c(2)]

##Splitting Into Train n Test in Time Series
train<- delhi_fill[1:2094,]
test<- delhi_fill[2095:2617,]
str(train)

train<- ts(train$pm_ma)
test<- ts(test$pm_ma)

library(dplyr)
library(smooth)
library(fpp)

##Using Holts Winter Method
#considering data has only level parameter
# alpha = 0.2
hw_a<- HoltWinters(train,alpha = 0.2, beta = F,gamma = F)
accuracy(hw_a$fitted,train)                         #### Train RMSE = 88.93
hwa_pred<- data.frame(predict(hw_a,n.ahead = 523))
plot(forecast(hw_a,h =523))
accuracy(hwa_pred$fit,test)                         #### Test RMSE = 94.44
hwa_mape<- MAPE(hwa_pred$fit,test)*100
hwa_mape

## Considering it has level and trend
# alpha = 0.15 and beta = 0.2
hw_ab<- HoltWinters(train,alpha = 0.2 , beta = 0.1,gamma = F)
accuracy(hw_ab$fitted,train)                       #### Train RMSE = 101.54
hwab_pred<- data.frame(predict(hw_ab,n.ahead = 523))
plot(forecast(hw_ab,h = 523))
accuracy(hwab_pred$fit,test)                        #### Test RMSE = 637.03
hwab_mape<- MAPE(hwab_pred$fit,test)*100
hwab_mape

## Without Optimum Value
# with only level Parameter
hw_na<- HoltWinters(train,beta = F, gamma = F)
accuracy(hw_na$fitted,train)                       #### Train RMSE = 55.18
hwna_pred<- data.frame(predict(hw_na,n.ahead = 523))
plot(forecast(hw_na,h = 523))
accuracy(hwna_pred$fit,test)                       #### Test RMSE = 162.14
hwna_mape<- MAPE(hwna_pred$fit,test)*100
hwna_mape

#with level n trend Parameter
hw_nab<- HoltWinters(train,gamma = F)
accuracy(hw_nab$fitted,train)                     ### Train RMSE = 55.32
hwnab_pred<- data.frame(predict(hw_nab,n.ahead = 523))
plot(forecast(hw_nab,h = 523))
accuracy(hwnab_pred$fit,test)                    #### Test RMSE = 222.58
hwnab_mape<- MAPE(hwnab_pred$fit,test)*100
hwnab_mape

## Creating Table
df_mape<- data.frame(Model = c("hwa_mape","hwab_mape","hwna_mape","hwnab_mape"),Values = c(hwa_mape,hwab_mape,hwna_mape,hwnab_mape))
View(df_mape)

##########################################################################################

##### RUN ON WHOLE DATASET  #####

new_model<- HoltWinters(delhi_fill$pm_ma)
accuracy(new_model$fitted,delhi_fill$pm_ma)      ### RMSE = 56.15
plot(forecast(new_model,h= 523))
forecast_new<- data.frame(predict(new_model,n.ahead = 523))
View(forecast_new)


library(padr)
library(dplyr)
library(tidyr)
library(readxl)
library(magrittr)
library(forecast)
library(imputeTS)
library(DMwR)

#Read Data
delhi_air <- read_excel("Downloads/Delhi.xlsx")
str(delhi_air)

#Converting structure of PM25 Data Into Numeric
delhi_air$pm25 <- gsub('-',NA,delhi_air$pm25,fixed=TRUE)       #"-" converted into NA
delhi_air$pm25<- as.numeric(delhi_air$pm25)
str(delhi_air)
plot(delhi_air$pm25,type = "l")


##Counting NA Values
sum(is.na(delhi_air$pm25))

## Filling up Date n Time
delhi_fill<- pad(as.data.frame(delhi_air,interval = NULL, start_val = NULL, end_val =NULL))
View(delhi_fill)
sum(is.na(delhi_fill$pm25))
plotNA.distribution(delhi_fill$pm25)    ## showing missing values
str(delhi_fill)


##replacing missing values with 
#delhi_fill$intrpolation<- na_seasplit(delhi_fill$pm25,algorithm = "interpolation",find_frequency=TRUE)
delhi_fill$pm_ma<- na_seasplit(delhi_fill$pm25,algorithm = "ma",find_frequency = T)

View(delhi_fill)
str(delhi_fill)
delhi_fill<- delhi_fill[,-c(2)]

## Converted Into Time Series 
delhi_fill$pm_ma<- ts(delhi_fill$pm_ma,frequency =365*24,start = c(2018,1),end = c(2018,2617))
str(delhi_fill)

######  Testing For Data whether it is stationery Or Not
library(aTSA)
library(tseries)
stationary.test(delhi_fill$pm_ma, method = "pp") # pp test
stationary.test(delhi_fill$pm_ma,method = "adf")  #adf test
trend.test(delhi_fill$pm_ma)

## Visualization  ##
library(ggplot2)

## With Missing Values ##
ggplot(data = delhi_air,aes(x= date,y= pm25)) + 
  geom_line(colour='blue') +
  theme(panel.background = element_blank())+
  ylim(0,750)+
  ggtitle("Missing Values")

### With TIME SERIES MOVING AVERAGE
ggplot(data = delhi_fill,aes(x= date,y= pm_ma)) + 
  geom_line(colour='red') +
  geom_line(colour="Blue",data = delhi_air,aes(x= date,y= pm25))+
  theme(panel.background = element_blank())+
  ylim(0,750)+
  ggtitle("MOVING AVERAGE Values")

View(delhi_fill)
str(delhi_fill)

### splitting
train<- delhi_fill[1:2094,]
test<- delhi_fill[2095:2617,]
str(train)

train<- ts(train$pm_ma)  
test<- ts(test$pm_ma)
library(dplyr)

##Model building


#####################   Forecast Using Neural Network     ######################################

#Model_1#
set.seed(123)
fit <- nnetar(train)
accuracy(fit)                        ### Train RMSE = 31.99
fcast<- forecast(fit,h = 523)
pred_fit<- data.frame(predict(fcast,n.ahead = 523))
plot(forecast(fit,h = 72))
accuracy(pred_fit$Point.Forecast,test) ### Test RMSE = 74.12
View(pred_fit)

##  Run on Whole Data-Set
set.seed(123)
fit_3 <- nnetar(delhi_fill$pm_ma)
accuracy(fit_3)                     ### Train RMSE = 33.49
fcast_3<- forecast(fit_3,h = 523)
pred_fit_3<- data.frame(predict(fcast_3,n.ahead = 523))
plot(forecast(fit_3,h = 523))
accuracy(fit_3$x,fit_3$fitted)



############################## Extra Models  ##########################################

# Model_2 #
set.seed(123)
fit_4<- nnetar(train,p = 24,size = 12)    
accuracy(fit_4)                             #### Train RMSE = 35.87
fcast_4<- forecast(fit_4,h = 523)
pred_fit_4<- data.frame(predict(fcast_4,n.ahead = 523))
plot(fcast_4)
accuracy(as.vector(fcast_4$mean),test)      ####  Test RMSE = 110.89
accuracy(pred_fit_4$Point.Forecast,test)



# Model_3 #
set.seed(123)
fit_5 <- nnetar(train,p = 24,size = 13)      
accuracy(fit_5)                           ### Train RMSE = 35.08
fcast_5<- forecast(fit_5,h = 523)
pred_fit_5<- data.frame(predict(fcast_5,n.ahead = 523))
plot(fcast_5)
accuracy(pred_fit_5$Point.Forecast,test)  ### Test RMSE = 106.78

Using Rshiny:

To Run R Shiny

library(shiny)

port <- Sys.getenv('PORT')

shiny::runApp(
  appDir = getwd(),
  host = '0.0.0.0',
  port = as.numeric(port)
)


library(shinydashboard)
library(shinycssloaders)
library(forecast)
library(padr)
library(imputeTS)
library(readxl)
library(dplyr)
library(DT)
library(ggplot2)
library(forecast)
library(ECharts2Shiny)


shinyServer<- function(input,output,session){
  
  data <- reactive({ 
    req(input$file1) ## ?req #  require that the input is available
    inFile <- input$file1 
    file.rename(inFile$datapath,paste(inFile$datapath, ".xlsx", sep=""))
    df <- read_excel(paste(inFile$datapath, ".xlsx", sep=""))
    df$pm25 <- as.numeric(df$pm25)
    return(df)
  })
  
  ##############
  
  output$contents <- DT:: renderDataTable({
    data()
  })
  
  output$navaluesplot<- renderPlot({
    if(is.null(data())!=T){
      ggplot(data = data(),aes(x= date,y= pm25)) + 
        geom_line(colour='blue') +
        theme(panel.background = element_blank())+
        ylim(0,750)+
        ggtitle("Missing Values")
      
    }
  })
  
  re <- reactive({
    inFile <- input$file1
    if (is.null(inFile))
      return(NULL)
    file.rename(inFile$datapath,paste(inFile$datapath, ".xlsx", sep=""))
    delhi <- read_excel(paste(inFile$datapath, ".xlsx", sep=""))
    delhi$pm25 <- as.numeric(delhi$pm25)
    delhi<- pad(as.data.frame(delhi,interval = NULL, start_val = NULL, end_val =NULL))
    delhi$pm_ma<-na_seasplit(delhi$pm25,algorithm = "ma",find_frequency = T)
    delhi_fill_1 <- delhi[,c(1,3)]
    colnames(delhi_fill_1) <- c("Date","PM25")
    delhi_fill_1$PM25 <- msts( delhi_fill_1$PM25,seasonal.periods = c(24, 24*7))
    delhi_fill_1
  })
  
  output$Preview <- DT:: renderDataTable({
    delhi_fill_1<- re()
  })

  
  output$Plot1<-  renderPlot({
    
    if(is.null(re())!=T){
      ### With TIME SERIES MOVING AVERAGE
      ggplot(data = re(),aes(x= Date,y= PM25)) + 
        geom_line(colour='red') +
        geom_line(colour="Blue",data = data(),aes(x= date,y= pm25))+
        theme(panel.background = element_blank())+
        ylim(0,750)+
        ggtitle("MOVING AVERAGE Values")
      
    }
    
  })
  
  output$forecastplot<- renderPlot({
    delhi_fill_1<- re()
    fit<- nnetar(delhi_fill_1$PM25)
    plot(forecast(fit,h = input$daysahead*24),xlab = "Date",ylab = "PM25")
  })
  
  output$table1<- DT:: renderDataTable({
    delhi_fill_1<- re()
    fit<- nnetar(delhi_fill_1$PM25)
    pred <- as.data.frame (forecast(fit,h=input$daysahead*24))
    pred$Date <- seq(from = as.POSIXct("2018-04-20 01:00",tz="UTC"), length.out = input$daysahead*24, by = "hour")
    pred$'Point Forecast' <- round(pred$'Point Forecast')
    pred <- pred[c(2,1)]
    rownames(pred) <- 1:nrow(pred)
    pred
  })
 
}

Using Heroku App
#!/bin/bash

shopt -s extglob
set -e

branch=${1:-heroku-16}
destroy=${2:-0}
repo=${3:-github.com/virtualstaticvoid}
waitfor=${4:-0} # used when testing

# create a temporary directory and copy
# the test application to it
dir=$(mktemp -d)
cp -r . $dir
pushd $dir

# commit to git for push to heroku
git init
echo "*.log" > .gitignore
git add --all
git commit -m "initial"

# create the app with R buildpack
heroku create --stack heroku-16 \
              --buildpack https://$repo/heroku-buildpack-r.git#$branch

# trick to get the app name
app=$(heroku apps:info -j | jq -r '.app.name')
url=$(heroku apps:info -j | jq -r '.app.web_url')

git push heroku master

# browse to the web application
if [ -z $DESKTOP_SESSION ]; then
  sleep 10
  curl $url --verbose
else
  heroku open --app $app
fi

# wait?
if [[ "$waitfor" -ne "0" ]]; then

  sleep $waitfor

  # output log
  heroku logs --num 1000 --app $app

fi

popd

# destroy the app, and clean up temporary files
if [[ "$destroy" -eq "1" ]]; then

  # clean up
  heroku apps:destroy $app --confirm $app
  rm -rf $dir

else

  GREEN='\033[1;32m'
  RESET='\033[0m'
  echo -e "${GREEN} ********************************************************************************"
  echo -e ""
  echo -e " Run the following command to destroy the test application when you are done."
  echo -e ""
  echo -e "  heroku apps:destroy $app"
  echo -e ""
  echo -e "********************************************************************************"
  echo -e "${RESET}"


#
# Example R code to install packages
#

###########################################################
# Update this line with the R packages to install:

my_packages = c(
	"shinythemes","shinydashboard","shinycssloaders","forecast","padr","imputeTS","readxl","dplyr","DT","ggplot2","shinyWidgets"
)

###########################################################
install_if_missing = function(p) {
  if (p %in% rownames(installed.packages()) == FALSE) {
    install.packages(p)
  }
}

invisible(sapply(my_packages, install_if_missing))